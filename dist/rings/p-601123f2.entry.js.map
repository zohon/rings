{"version":3,"names":["ringComponentCss","RingComponentStyle0","RingComponent","Array","fill","pos","rings","map","_","index","keys","id","reverse","checkBoard","best","this","gameBoard","winner","score","Math","max","posibilitys","result","posibility","winner1","winner2","posPosition","winPos","find","filter","item","undefined","length","setTimeout","alert","dropHandler","event","preventDefault","number","dataTransfer","getData","addToBoard","Number","dragOver","checkDraggable","dropEffect","draggingItem","checkTurn","turn","dragStart","clearData","setData","toString","dragEnd","renderRings","h","class","onDrop","onDragOver","renderRing","draggable","key","onDragStart","onDragEnd","renderBoard","sort","sortPos","posTarget","board","push","playItem","a","b","renderPLayer","playerNumber","availableRIngs","render","Host"],"sources":["src/components/ring-component/ring-component.scss?tag=ring-component&encapsulation=shadow","src/components/ring-component/ring-component.tsx"],"sourcesContent":[":host {\n  --color-player-1: blue;\n  --color-player-2: red;\n\n  display: block;\n  // background-color: #236167;\n  height: 100%;\n  width: 100%;\n  // color: white;\n\n  // &::before {\n  //   content: '';\n  //   position: absolute;\n  //   bottom: 0;\n  //   left: 0;\n  //   height: 30%;\n  //   width: 100%;\n  //   background-color: #2C8437;\n  // }\n\n\n  // .header {\n  //   #C38D94\n  // }\n\n  .game {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n    align-content: space-between;\n    justify-content: space-between;\n\n\n    .player {\n      display: flex;\n      align-items: center;\n      padding: 15px;\n      gap: 5px;\n\n      .ring {\n        &::after {\n          content: attr(data-number);\n        }\n      }\n    }\n\n    .board {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      flex-wrap: wrap;\n\n      .rings {\n        position: relative;\n        width: 100px;\n        height: 100px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex-wrap: wrap;\n        flex: 0 0 calc(33.3333% - 2px);\n        border: 1px solid white;\n        padding: 30px 0;\n\n        &::after {\n          content: attr(data-max);\n          position: absolute;\n        }\n\n\n        &.dropable {\n          background-color: rgba(0, 0, 0, 0.034);\n        }\n\n        &:nth-child(3n) {\n          border-left: 1px solid grey;\n        }\n\n        &:nth-child(3n + 1) {\n          border-right: 1px solid grey;\n        }\n\n        &:nth-child(n + 4) {\n          border-top: 1px solid grey;\n        }\n\n        .ring {\n          position: absolute;\n        }\n      }\n    }\n\n    .ring {\n      border: 2px solid;\n      border-radius: 50%;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n\n      &.draggable {\n        cursor: grab;\n      }\n\n      &:hover::after {\n        content: attr(data-number);\n      }\n\n      @for $i from 1 through 100 {\n        &[data-number='#{$i}'] {\n          width: ($i*6) + px;\n          height: ($i*6) + px;\n        }\n      }\n\n      &[data-player='1'] {\n        border-color: var(--color-player-1);\n      }\n\n      &[data-player='2'] {\n        border-color: var(--color-player-2);\n      }\n    }\n  }\n\n}","import { Component, Host, State, Watch, h } from '@stencil/core';\n\n\ninterface BoardItem {\n  pos: number;\n  rings: number[];\n};\n\n@Component({\n  tag: 'ring-component',\n  styleUrl: 'ring-component.scss',\n  shadow: true,\n})\nexport class RingComponent {\n\n  @State() draggingItem: number = 0;\n  @State() gameBoard: BoardItem[] = new Array(9).fill({\n    pos: 0,\n    rings: []\n  }).map((_, index) => ({\n    pos: index + 1,\n    rings: []\n  }))\n\n  @Watch('gameBoard')\n  checkBoard() {\n\n    const best = this.gameBoard.map(({ pos, rings }) => {\n\n      let winner;\n      const score = Math.max(0, ...rings);\n\n      if (score) {\n        winner = Math.max(0, ...rings) % 2 === 0 ? 2 : 1;\n      }\n\n      return { pos, winner }\n    });\n\n    const posibilitys = [\n      [1, 2, 3],\n      [4, 5, 6],\n      [7, 8, 9],\n      [1, 4, 7],\n      [2, 5, 8],\n      [3, 6, 9],\n      [1, 5, 9],\n      [3, 5, 7],\n    ];\n\n    const result = posibilitys.map(posibility => {\n      let winner1 = 0;\n      let winner2 = 0;\n      posibility.map(posPosition => {\n        const winPos = best.find(({ pos }) => posPosition === pos).winner\n        if (winPos === 1) {\n          winner1++;\n        }\n        if (winPos === 2) {\n          winner2++;\n        }\n      })\n\n      if (winner1 === 3) {\n        return 1\n      }\n      if (winner2 === 3) {\n        return 2\n      }\n    }).filter(item => item !== undefined)\n\n\n    if (result.length) {\n      setTimeout((() => {\n        alert(`PLAYER ${result[0]} WIN`);\n      }), 150)\n    }\n\n  }\n\n  @State() playItem = [...Array(20).keys()].map(id => id + 5).reverse();\n\n  @State() turn = 1;\n\n  dropHandler(event: DragEvent, pos: number) {\n    event.preventDefault();\n    const number = event.dataTransfer.getData(\"ring\");\n    this.addToBoard(Number(number), pos);\n  }\n\n  dragOver(event: DragEvent, rings: number[]) {\n    if (this.checkDraggable(rings)) {\n      event.preventDefault();\n      event.dataTransfer.dropEffect = \"move\";\n    }\n  }\n\n  checkDraggable(rings: number[]) {\n    return this.draggingItem && this.checkTurn() && this.draggingItem > Math.max(0, ...rings)\n  }\n\n  checkTurn() {\n    if (this.turn % 2 === 0 && this.draggingItem % 2 === 0) {\n      return true;\n    }\n    if (this.turn % 2 !== 0 && this.draggingItem % 2 !== 0) {\n      return true;\n    }\n  }\n\n  dragStart(event: DragEvent, number: number) {\n    // Add different types of drag data\n    event.dataTransfer.clearData();\n    event.dataTransfer.setData(\"ring\", number.toString());\n\n    this.draggingItem = number;\n  }\n\n  dragEnd() {\n    this.draggingItem = null;\n  }\n\n  renderRings({ rings, pos }: BoardItem): HTMLElement {\n\n    return <div class={`rings ${this.checkDraggable(rings) ? 'dropable' : ''}`}\n      data-max={Math.max(0, ...rings) > 0 ? Math.max(0, ...rings) : ''}\n      onDrop={event => this.dropHandler(event, pos)} onDragOver={event => this.dragOver(event, rings)}>\n      {\n        rings.map((number) => this.renderRing(number))\n      }\n    </div>\n  }\n\n  renderRing(number: number, draggable = false): HTMLElement {\n    return <div class={`ring ${draggable ? 'draggable' : ''}`}\n      key={number}\n      data-player={number % 2 == 0 ? 1 : 2}\n      data-number={number}\n      draggable={draggable} onDragStart={(event) => this.dragStart(event, number)} onDragEnd={() => this.dragEnd()}\n    ></div>\n  }\n\n  renderBoard(): HTMLElement {\n    return <div class=\"board\">\n      {this.gameBoard.sort(this.sortPos).map(item => {\n        return this.renderRings(item)\n      })}\n    </div>\n  }\n\n  addToBoard(number: number, posTarget: number) {\n    this.gameBoard = this.gameBoard.map((board) => {\n      if (board.pos === posTarget) {\n        board.rings.push(number);\n      }\n      return board;\n    });\n    this.playItem = this.playItem.filter(item => item !== number);\n    this.turn++;\n  }\n\n  sortPos(a: BoardItem, b: BoardItem): number {\n    if (a.pos < b.pos) {\n      return -1;\n    } else if (a.pos > b.pos) {\n      return 1;\n    }\n    // a must be equal to b\n    return 0;\n  }\n\n  renderPLayer(playerNumber: number) {\n    const availableRIngs = this.playItem.filter(number => {\n      if (playerNumber % 2 === 0) {\n        return number % 2 === 0;\n      }\n\n      return number % 2 !== 0;\n    });\n\n    let draggable = false\n\n    if (this.turn % 2 === 0 && playerNumber % 2 === 0) {\n      draggable = true;\n    }\n    if (this.turn % 2 !== 0 && playerNumber % 2 !== 0) {\n      draggable = true;\n    }\n\n    return <div class=\"player\" data-player={playerNumber}>\n      {availableRIngs.map(number => this.renderRing(number, draggable))}\n    </div>\n  }\n\n  render(): HTMLElement {\n    return (\n      <Host>\n        <div class=\"header\"></div>\n        <div class=\"game\">\n          {this.renderPLayer(1)}\n          {this.renderBoard()}\n          {this.renderPLayer(2)}\n        </div>\n      </Host >\n    );\n  }\n\n}\n"],"mappings":"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"}