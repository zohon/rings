{"file":"ring-component.entry.js","mappings":"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","names":[],"sources":["src/components/ring-component/ring-component.scss?tag=ring-component&encapsulation=shadow","src/components/ring-component/ring-component.tsx"],"sourcesContent":[":host {\n  --color-player-1: blue;\n  --color-player-2: red;\n\n  display: block;\n  // background-color: #236167;\n  height: 100%;\n  width: 100%;\n  // color: white;\n\n  // &::before {\n  //   content: '';\n  //   position: absolute;\n  //   bottom: 0;\n  //   left: 0;\n  //   height: 30%;\n  //   width: 100%;\n  //   background-color: #2C8437;\n  // }\n\n\n  // .header {\n  //   #C38D94\n  // }\n\n  .game {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n    align-content: space-between;\n    justify-content: space-between;\n\n\n    .player {\n      display: flex;\n      align-items: center;\n      padding: 15px;\n      gap: 5px;\n\n      .ring {\n        &::after {\n          content: attr(data-number);\n        }\n      }\n    }\n\n    .board {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      flex-wrap: wrap;\n\n      .rings {\n        position: relative;\n        width: 100px;\n        height: 100px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex-wrap: wrap;\n        flex: 0 0 calc(33.3333% - 2px);\n        border: 1px solid white;\n        padding: 30px 0;\n\n        &::after {\n          content: attr(data-max);\n          position: absolute;\n        }\n\n\n        &.dropable {\n          background-color: rgba(0, 0, 0, 0.034);\n        }\n\n        &:nth-child(3n) {\n          border-left: 1px solid grey;\n        }\n\n        &:nth-child(3n + 1) {\n          border-right: 1px solid grey;\n        }\n\n        &:nth-child(n + 4) {\n          border-top: 1px solid grey;\n        }\n\n        .ring {\n          position: absolute;\n        }\n      }\n    }\n\n    .ring {\n      border: 2px solid;\n      border-radius: 50%;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n\n      &.draggable {\n        cursor: grab;\n      }\n\n      &:hover::after {\n        content: attr(data-number);\n      }\n\n      @for $i from 1 through 100 {\n        &[data-number='#{$i}'] {\n          width: ($i*6) + px;\n          height: ($i*6) + px;\n        }\n      }\n\n      &[data-player='1'] {\n        border-color: var(--color-player-1);\n      }\n\n      &[data-player='2'] {\n        border-color: var(--color-player-2);\n      }\n    }\n  }\n\n}","import { Component, Host, State, Watch, h } from '@stencil/core';\n\n\ninterface BoardItem {\n  pos: number;\n  rings: number[];\n};\n\n@Component({\n  tag: 'ring-component',\n  styleUrl: 'ring-component.scss',\n  shadow: true,\n})\nexport class RingComponent {\n\n  @State() draggingItem: number = 0;\n  @State() gameBoard: BoardItem[] = new Array(9).fill({\n    pos: 0,\n    rings: []\n  }).map((_, index) => ({\n    pos: index + 1,\n    rings: []\n  }))\n\n  @Watch('gameBoard')\n  checkBoard() {\n\n    const best = this.gameBoard.map(({ pos, rings }) => {\n\n      let winner;\n      const score = Math.max(0, ...rings);\n\n      if (score) {\n        winner = Math.max(0, ...rings) % 2 === 0 ? 2 : 1;\n      }\n\n      return { pos, winner }\n    });\n\n    const posibilitys = [\n      [1, 2, 3],\n      [4, 5, 6],\n      [7, 8, 9],\n      [1, 4, 7],\n      [2, 5, 8],\n      [3, 6, 9],\n      [1, 5, 9],\n      [3, 5, 7],\n    ];\n\n    const result = posibilitys.map(posibility => {\n      let winner1 = 0;\n      let winner2 = 0;\n      posibility.map(posPosition => {\n        const winPos = best.find(({ pos }) => posPosition === pos).winner\n        if (winPos === 1) {\n          winner1++;\n        }\n        if (winPos === 2) {\n          winner2++;\n        }\n      })\n\n      if (winner1 === 3) {\n        return 1\n      }\n      if (winner2 === 3) {\n        return 2\n      }\n    }).filter(item => item !== undefined)\n\n\n    if (result.length) {\n      setTimeout((() => {\n        alert(`PLAYER ${result[0]} WIN`);\n      }), 150)\n    }\n\n  }\n\n  @State() playItem = [...Array(20).keys()].map(id => id + 5).reverse();\n\n  @State() turn = 1;\n\n  dropHandler(event: DragEvent, pos: number) {\n    event.preventDefault();\n    const number = event.dataTransfer.getData(\"ring\");\n    this.addToBoard(Number(number), pos);\n  }\n\n  dragOver(event: DragEvent, rings: number[]) {\n    if (this.checkDraggable(rings)) {\n      event.preventDefault();\n      event.dataTransfer.dropEffect = \"move\";\n    }\n  }\n\n  checkDraggable(rings: number[]) {\n    return this.draggingItem && this.checkTurn() && this.draggingItem > Math.max(0, ...rings)\n  }\n\n  checkTurn() {\n    if (this.turn % 2 === 0 && this.draggingItem % 2 === 0) {\n      return true;\n    }\n    if (this.turn % 2 !== 0 && this.draggingItem % 2 !== 0) {\n      return true;\n    }\n  }\n\n  dragStart(event: DragEvent, number: number) {\n    // Add different types of drag data\n    event.dataTransfer.clearData();\n    event.dataTransfer.setData(\"ring\", number.toString());\n\n    this.draggingItem = number;\n  }\n\n  dragEnd() {\n    this.draggingItem = null;\n  }\n\n  renderRings({ rings, pos }: BoardItem): HTMLElement {\n\n    return <div class={`rings ${this.checkDraggable(rings) ? 'dropable' : ''}`}\n      data-max={Math.max(0, ...rings) > 0 ? Math.max(0, ...rings) : ''}\n      onDrop={event => this.dropHandler(event, pos)} onDragOver={event => this.dragOver(event, rings)}>\n      {\n        rings.map((number) => this.renderRing(number))\n      }\n    </div>\n  }\n\n  renderRing(number: number, draggable = false): HTMLElement {\n    return <div class={`ring ${draggable ? 'draggable' : ''}`}\n      key={number}\n      data-player={number % 2 == 0 ? 1 : 2}\n      data-number={number}\n      draggable={draggable} onDragStart={(event) => this.dragStart(event, number)} onDragEnd={() => this.dragEnd()}\n    ></div>\n  }\n\n  renderBoard(): HTMLElement {\n    return <div class=\"board\">\n      {this.gameBoard.sort(this.sortPos).map(item => {\n        return this.renderRings(item)\n      })}\n    </div>\n  }\n\n  addToBoard(number: number, posTarget: number) {\n    this.gameBoard = this.gameBoard.map((board) => {\n      if (board.pos === posTarget) {\n        board.rings.push(number);\n      }\n      return board;\n    });\n    this.playItem = this.playItem.filter(item => item !== number);\n    this.turn++;\n  }\n\n  sortPos(a: BoardItem, b: BoardItem): number {\n    if (a.pos < b.pos) {\n      return -1;\n    } else if (a.pos > b.pos) {\n      return 1;\n    }\n    // a must be equal to b\n    return 0;\n  }\n\n  renderPLayer(playerNumber: number) {\n    const availableRIngs = this.playItem.filter(number => {\n      if (playerNumber % 2 === 0) {\n        return number % 2 === 0;\n      }\n\n      return number % 2 !== 0;\n    });\n\n    let draggable = false\n\n    if (this.turn % 2 === 0 && playerNumber % 2 === 0) {\n      draggable = true;\n    }\n    if (this.turn % 2 !== 0 && playerNumber % 2 !== 0) {\n      draggable = true;\n    }\n\n    return <div class=\"player\" data-player={playerNumber}>\n      {availableRIngs.map(number => this.renderRing(number, draggable))}\n    </div>\n  }\n\n  render(): HTMLElement {\n    return (\n      <Host>\n        <div class=\"header\"></div>\n        <div class=\"game\">\n          {this.renderPLayer(1)}\n          {this.renderBoard()}\n          {this.renderPLayer(2)}\n        </div>\n      </Host >\n    );\n  }\n\n}\n"],"version":3}